//////////////////////////////////////////////////////////////////////////////////////////////
// DO NOT MODIFY THIS FILE                                                                  //
// This file is automatically generated by ZenStack CLI and should not be manually updated. //
//////////////////////////////////////////////////////////////////////////////////////////////

datasource db {
  provider = "postgresql"
  url      = env("SERVER_DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserStatus {
  INVITED
  VERIFIED
}

/// @@allow('all', auth().id == user.id)
model Account {
  id                       String  @id() @default(uuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  refresh_token_expires_in Int?

  @@unique([provider, providerAccountId])
}

/// @@auth
/// @@allow('all', auth().id == this.id)
/// @@allow('all', auth().roles?[name == 'admin'])
/// @@allow('create', true)
/// @@allow('read', true)
model User {
  id                String             @id() @default(uuid())
  name              String?
  email             String?            @unique()
  pictureUrl        String?            @default("https://i.imgur.com/ZdJSK3Y.jpeg")
  tokenInvitation   String?
  stripeCustomerId  String?
  status            UserStatus         @default(VERIFIED)
  /// @password
  /// @omit
  password          String?
  dateCreated       DateTime           @default(now())
  dateUpdated       DateTime           @default(now()) @updatedAt()
  accounts          Account[]
  sessions          Session[]
  roles             Role[]
  organizationRoles OrganizationRole[]
  emailTemplates    EmailTemplate[]    @relation("user")
  emailsAsSender    Email[]            @relation("sender")
  userSettings      UserSetting[]      @relation("user")
}

/// @@allow('all', auth().id == user.id)
model Session {
  id           String   @id() @default(uuid())
  sessionToken String   @unique()
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

/// @@allow('read', auth().id == this.userId)
/// @@allow('delete', auth().id == this.userId)
/// @@allow('create', name != 'admin')
/// @@allow('update', future().name != 'admin')
model Role {
  id     String @id() @default(uuid())
  name   String
  userId String
  user   User   @relation(fields: [userId], references: [id])
}

/// @@allow('all', auth().roles?[name == 'admin'])
/// @@allow('all', organization.roles?[user == auth() && name == 'owner'])
/// @@allow('create', organization.roles?[user == auth()] && name != 'owner')
/// @@allow('read', organization.roles?[user == auth()])
/// @@allow('delete', auth() == user)
model OrganizationRole {
  id             String       @id() @default(uuid())
  name           String
  dateCreated    DateTime     @default(now())
  dateUpdated    DateTime     @default(now()) @updatedAt()
  userId         String
  user           User         @relation(fields: [userId], references: [id])
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
}

/// @@allow('all', auth().roles?[name == 'admin'])
/// @@allow('all', roles?[user == auth() && name == 'owner'])
/// @@allow('read', roles?[user == auth()])
model Organization {
  id               String             @id() @default(uuid())
  name             String
  pictureUrl       String?            @default("https://i.imgur.com/BgkFiid.jpeg")
  stripeCustomerId String?
  dateCreated      DateTime           @default(now())
  dateUpdated      DateTime           @default(now()) @updatedAt()
  roles            OrganizationRole[]
}

/// @@allow('all', true)
model EmailTemplate {
  id               String   @id() @default(uuid())
  name             String
  subject          String
  body             String
  userId           String?
  user             User?    @relation(fields: [userId], references: [id], name: "user")
  emailsAsTemplate Email[]  @relation("template")
  dateCreated      DateTime @default(now())
  dateUpdated      DateTime @default(now()) @updatedAt()
}

/// @@allow('all', true)
model Email {
  id              String           @id() @default(uuid())
  subject         String
  body            String
  senderId        String?
  sender          User?            @relation(fields: [senderId], references: [id], name: "sender")
  templateId      String?
  template        EmailTemplate?   @relation(fields: [templateId], references: [id], name: "template")
  emailRecipients EmailRecipient[] @relation("email")
  dateCreated     DateTime         @default(now())
  dateUpdated     DateTime         @default(now()) @updatedAt()
}

/// @@allow('all', true)
model EmailRecipient {
  id             String   @id() @default(uuid())
  recipientEmail String
  status         String
  emailId        String?
  email          Email?   @relation(fields: [emailId], references: [id], name: "email")
  dateCreated    DateTime @default(now())
  dateUpdated    DateTime @default(now()) @updatedAt()
}

/// @@allow('all', true)
model UserSetting {
  id           String   @id() @default(uuid())
  settingKey   String
  settingValue String
  userId       String?
  user         User?    @relation(fields: [userId], references: [id], name: "user")
  dateCreated  DateTime @default(now())
  dateUpdated  DateTime @default(now()) @updatedAt()
}

/// @@allow('all', true)
model RagVector {
  id        String   @id() @default(uuid())
  key       String
  url       String
  tags      String[] @default([])
  /// @omit
  vectors   Bytes?
  /// @omit
  documents Bytes?
}
